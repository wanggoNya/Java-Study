package day8;

public class Ex_InstanceType {
// 객체 타입 변환
/*
 * 기본 자료형에서 봤듯이 자바는 =를 사용하여 왼 쪽과 오른 쪽의 자료형이 일치해야 한다.
 * 만약 자료형이 자르면 자바가 자동으로 타입을 변환해 주거나
 * 개발자가 명시적으로 타입을 변환해야 한다. 객체도 마찬가지로 타입 변환이 일어난다.
 * 
 * 객체에서는 자식 클래스에서 부모 클래스 쪽으로 변환 되는 것이 업 캐스팅
 * (반대는 다운 캐스팅)
 * 객체는 항상 업캐스팅은 할 수 있으므로 명시저긍로 적어주지 않아도 자바가 대신 해 준다.
 * 하지만 객체 명시적으로 적어도 다운 캐스팅 자체가 안 될 때가 있다.
 * 잘못된 다운캐스팅을 수행하면 ClassCastException이 발생하고 프로그램이 종료 된다.
 * 
 * 사람		학생은 사람이다. (언제나 OK)		업캐스팅
 * 학생		사람은 학생이다. (언제나는 X)		다운캐스팅
 * 
 */
//	사람 human1 = new 사람(); : 사람 클래스로 만듦!! 사람의 공통된 속성, 기능만 포함
//							학생으로 다운캐스팅 불가능
//	사람 human2 = new 학생(); : 실제 학생() 생성자로 객체를 생성!! 
//							사람의 공통된 특성, 학생만의 속성, 기능 포함
//							학생으로 다운캐스팅 가능
	
//	사람 () 생성자를 이용해 객체를 생성하고 사람 자료형에 대입했다.
//	학생 () 생성자를 이용해 객체를 생성하고 사람 자료형에 대입했다.
//	둘 다 사람 타입의 자료형. BUT 내용이 다름!
	
}
//class A {}   //할아버지
//class B extends A{} //아버지
//class C extends B{} // 손자
//
////업캐스팅  - 학생은 언제나 사람이 될수 있다. 
//B b1 = new B();
//A a1 = (A) b1;  // A a1 = b1; ok
//
//C c2 = new c();
//B B2 = (B) c2;     // B b2 = c2; ok
//A a2 = (A) c2;     // A a2 = c2; ok
//
//
////다운캐스팅
//A a1 = new A();
//B b1 = (B) a1; //에러 발생
//
//A a2 = new B();
//B b2 = (B) a2; // 가능  , 다운 캐스팅은 경우에 따라 될수 도 있다. 
//C c2 = (C) a2; // 에러 발생
//
//무슨 타입으로 선언돼 있는지는 중요하지 않고 어떤 생성자로 생성됐는지가 중요하다. 
//B()생성자로 만들었으면 A로 캐스팅 할수 있고 C()로 만들었다면 A와 B로 캐스팅 할수 있다. 
