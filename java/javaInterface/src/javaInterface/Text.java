package javaInterface;

public class Text {
	/*

	다형성을 위한 2개의 선택권 : 클래스와 인터페이스

	다형성? : 프로그램 언어 요소 (상수, 변수, 식, 객체, 메소드 등) 다양한 자료형에 속하는 것이 허가되는 성질
	- 규칙적이고 체계적으로 다양한 일을 그에 맞게 수행할 수 있게 하는 게 목적
	- 비슷한 걸 설명하는데 내용이 다를 때
	- 여러 형태를 받아들일 수 있는 성질
	- 상황에 따라 의미를 다르게 부여할 수 있는 특성
	- 하나의 타입에 여러 객체를 대입할 수 있는 성질
	
	- 변화에 유연한 소프트웨어를 만들기 위함!
	- 코드의 중복을 줄이면서 변경과 확장에 유연한 객체지향적인 코드를 작성하는데에 유용!

	장점
	- 기능을 확장하거나 객체를 변경해야할 때 타입 변경 없이 객체 주입만으로 수정이 일어나게 할 수 잇음
	- 상속을 이용하면 중복되는 코드까지 제거할 수 있음 -> 객체 지행 설꼐와 가까워짐

	1. 오버로딩 : 같은 이름의 함수(메서드)를 여러 개 정의, 매개변수의 유형과 개수를 다르게 해서 다양한 유형의 호출이 가능
	- 여러 종류의 타입을 받아들여서 결국엔 같은 기능을 하도록 만들기 위함
	- 메소드를 동적으로 호출할 수 있어서 다형성이라고 할 수 있음
	- 메소드를 오버로딩하는 경우 요구사항이 변경되었을 때 모든 메소드에서 수정이 필요해서, 필요한 경우에만 사용할 것.
	- 생성자 오버로딩을 많이 사용
	-> 예시 : OverloadingTest > Print클래스의 display 메소드
	
	* 자바 표준 입출력 클래스
	사용자와 프로그램 사이 입출력을 담당하는 수단
	입출력을 담당하는 수단 또한 객체
	자바에서는 System.in 스트림을 사용하여 표준 입력 작업을 수행한다.
	System.out 스트림, System.err 스트림을 사용해서 표준 출력 작업을 수행
	
	2. 오버라이딩 : 상위 클래스 메소드를 하위 클래스에서 재정의하는 것
	- 상속을 받은 하위 클래스에서 부모 클래스의 메서드를 오버라이딩 시켜서 다형성을 가능하게 한다던가,
	- 인터페이스의 implements 클래스에서 인터페이스들의 메서드들을 재정의하면서 다형성을 가능하게 한다.
	- 상속보다는 인터페이스를 사용하길 권장
	- 개발자는 빠르게 개발하고 지속적이고 새로운 요구사항과 변경사항을 적용해야 한다. 이렇기 위해 유연성이 중요하고,
		상속을 통해서는 강하게 결합된다. (부모클래스를 상속받은 자식 클래스에서는 부모 클래스의 모든 메서드를 그대로 사용하므로)
		원치않는 메서드들도 상속되므로 의도치 않게 버그가 생길 수 있음 
	
	3. 인터페이스
	- 자바에서는 extends(상속) 다중 상속이 불가능하다. interface를 이용하면 가능해짐
	-> 예시 : Pay 

	- 만약 여기서 새로운 결제방식으로 QR결제가 비즈니스 모델에 추가가 되면 Pay 인터페이스를 구현하는 QrPay 구현클래스를
		작성하면서 유연성을 올리게 된다.
	- implements 구현하는 느낌 그대로 인터페이스에 정의된 메서드들을 각 클래스의 목적에 맞게
		동일한 기능으로 구현한다.
		상속 관계와 달리 다른 부모클래스를 상속하더라도 같은 기능이 필요한 경우에 사용된다.
		
	4. 상속 extends
	- 단일만 가능
	- 강제하거나 특정한 영역에 집중시킴
	- abstract class를 사용해서 상속받는 하위 클래스에서 반드시 구현하도록 강제한다. 
	- extend 뜻처럼, 상속하고 확장하는 느낌 그대로 자신의 기능을 하위로 확장시키는 것
	- 부모 클래스를 상속해서 부모 클래스가 가진 기능들을 구현해야 하는 경우에 사용
	
	- 문법, 부모클래스 변수나 메소드, 생성자에 접근할 때 super(int num) 사용 
	*/


}
